@import 'sass-tests';

@include describe('Background') {
  @include it('check BackgroundOpacity output') {
    @include assert {
      $Color: $BackgroundColor;
      $Opacity: $Opacity;
      $RGBColor: rgb(red($Color), green($Color), blue($Color));
      $RGBAColor: rgba(red($Color), green($Color), blue($Color), $Opacity);
      @include output {
        @include BackgroundOpacity($Color, $Opacity);
      }
      @include expect {
        background: $RGBColor;
        background: transparent\9;
        background: $RGBAColor;
      }
    }
  }

  @include it('check BackgroundSize output') {
    @include assert {
      $Arguments: cover;
      @include output {
        @include BackgroundSize($Arguments);
      }
      @include expect {
        -webkit-background-size: $Arguments;
        -moz-background-size: $Arguments;
        -ms-background-size: $Arguments;
        -o-background-size: $Arguments;
        background-size: $Arguments;
      }
    }
  }

  @include it('check BackgroundClip output') {
    @include assert {
      $Argument: $BackgroundClipType;
      @include output {
        @include BackgroundClip($Argument);
      }
      @include expect {
        -moz-background-clip: $Argument;
        -webkit-background-clip: $Argument;
        background-clip: $Argument;
      }
    }
  }

  @include it('check BackgroundPosition output') {
    @include assert {
      $X: 50%;
      $Y: 50%;
      @include output {
        @include BackgroundPosition($X, $Y);
      }
      @include expect {
        background-position-x: $X;
        background-position-y: $Y;
        background-position: $X $Y;
      }
    }
  }

  @include it('check BackgroundVisibility output') {
    @include assert {
      $Arguments: visible;
      @include output {
        @include BackgroundVisibility($Arguments);
      }
      @include expect {
        -webkit-backface-visibility: $Arguments;
        backface-visibility: $Arguments;
      }
    }
  }

  @include it('check BackgroundImage output') {
    @include assert {
      @include output {
        @include BackgroundImage('/test.img', '/testBig.img', 50px, 100px);
        @include BackgroundImage('/test.img');
      }
      @include expect {
        background-image: url('/test.img');
        -webkit-background-size: 50px 100px;
        -moz-background-size: 50px 100px;
        -ms-background-size: 50px 100px;
        -o-background-size: 50px 100px;
        background-size: 50px 100px;

        @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx) {
          background-image: url('/testBig.img');
          -webkit-background-size: 50px 100px;
          -moz-background-size: 50px 100px;
          -ms-background-size: 50px 100px;
          -o-background-size: 50px 100px;
          background-size: 50px 100px;
        }
        background-image: url('/test.img');
        -webkit-background-size: auto auto;
        -moz-background-size: auto auto;
        -ms-background-size: auto auto;
        -o-background-size: auto auto;
        background-size: auto auto;
      }
    }
  }


  @include it('check BackgroundIconSize output') {
    @include assert {
      @include output {
        @include BackgroundIconSize();
        @include BackgroundIconSize(50px, 100px);
      }
      @include expect {
        -webkit-background-size: auto auto;
        -moz-background-size: auto auto;
        -ms-background-size: auto auto;
        -o-background-size: auto auto;
        background-size: auto auto;
        @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx) {
          -webkit-background-size: auto auto;
          -moz-background-size: auto auto;
          -ms-background-size: auto auto;
          -o-background-size: auto auto;
          background-size: auto auto;
        }
        -webkit-background-size: 50px 100px;
        -moz-background-size: 50px 100px;
        -ms-background-size: 50px 100px;
        -o-background-size: 50px 100px;
        background-size: 50px 100px;
        @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx) {
          -webkit-background-size: 50px 100px;
          -moz-background-size: 50px 100px;
          -ms-background-size: 50px 100px;
          -o-background-size: 50px 100px;
          background-size: 50px 100px;
        }
      }
    }
  }

  @include it('check LinearGradient output') {
    @include assert {
      $Arguments: 15deg, transparent 12%, #000000 88%, transparent 99%;
      @include output {
        @include LinearGradient($Arguments);
      }
      @include expect {
        background: -webkit-gradient($Arguments);
        background: -webkit-linear-gradient($Arguments);
        background: -moz-linear-gradient($Arguments);
        background: -ms-linear-gradient($Arguments);
        background: -o-linear-gradient($Arguments);
      }
    }
  }

  @include it('check GradientVertical output') {
    @include assert {
      $StartColor: $GradientStartColor;
      $EndColor: $GradientEndColor;
      @include output {
        @include GradientVertical($StartColor, $EndColor);
      }
      @include expect {
        background-color: $StartColor;
        background: -webkit-gradient(linear, left top, left bottom, from($StartColor), to($EndColor));
        background: -webkit-linear-gradient(top, $StartColor, $EndColor);
        background: -moz-linear-gradient(top, $StartColor, $EndColor);
        background: -ms-linear-gradient(top, $StartColor, $EndColor);
        background: -o-linear-gradient(top, $StartColor, $EndColor);
      }
    }
  }

  @include it('check GradientHorizontal output') {
    @include assert {
      $StartColor: $GradientStartColor;
      $EndColor: $GradientEndColor;
      @include output {
        @include GradientHorizontal($StartColor, $EndColor);
      }
      @include expect {
        background-color: $StartColor;
        background-image: -webkit-gradient(linear, left top, right top, from($StartColor), to($EndColor));
        background-image: -webkit-linear-gradient(left, $StartColor, $EndColor);
        background-image: -moz-linear-gradient(left, $StartColor, $EndColor);
        background-image: -ms-linear-gradient(left, $StartColor, $EndColor);
        background-image: -o-linear-gradient(left, $StartColor, $EndColor);
      }
    }
  }


}
